// <auto-generated />
using MediTechAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MediTechAPI.Migrations
{
    [DbContext(typeof(MediTechDbContext))]
    [Migration("20231205010116_initMigration")]
    partial class initMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MediTechAPI.Models.DoctorModel", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AniosExperiencia")
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DoctorId");

                    b.ToTable("DoctorModel");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            AniosExperiencia = 5,
                            Apellido = "Apellido1",
                            Direccion = "Dirección 1",
                            Email = "nombre1@example.com",
                            Especialidad = "Medicina General",
                            Nombre = "Nombre1",
                            Telefono = "123456789"
                        },
                        new
                        {
                            DoctorId = 2,
                            AniosExperiencia = 8,
                            Apellido = "Apellido2",
                            Direccion = "Dirección 2",
                            Email = "nombre2@example.com",
                            Especialidad = "Cardiología",
                            Nombre = "Nombre2",
                            Telefono = "987654321"
                        },
                        new
                        {
                            DoctorId = 3,
                            AniosExperiencia = 10,
                            Apellido = "Apellido3",
                            Direccion = "Dirección 3",
                            Email = "nombre3@example.com",
                            Especialidad = "Dermatología",
                            Nombre = "Nombre3",
                            Telefono = "111222333"
                        },
                        new
                        {
                            DoctorId = 4,
                            AniosExperiencia = 6,
                            Apellido = "Apellido4",
                            Direccion = "Dirección 4",
                            Email = "nombre4@example.com",
                            Especialidad = "Gastroenterología",
                            Nombre = "Nombre4",
                            Telefono = "444555666"
                        },
                        new
                        {
                            DoctorId = 5,
                            AniosExperiencia = 12,
                            Apellido = "Apellido5",
                            Direccion = "Dirección 5",
                            Email = "nombre5@example.com",
                            Especialidad = "Neurología",
                            Nombre = "Nombre5",
                            Telefono = "777888999"
                        });
                });

            modelBuilder.Entity("MediTechAPI.Models.PacienteModel", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ClienteId");

                    b.ToTable("PacienteModel");

                    b.HasData(
                        new
                        {
                            ClienteId = 1,
                            Apellido = "Apellido1",
                            Direccion = "Dirección 1",
                            Email = "nombre1@example.com",
                            Nombre = "Nombre1",
                            Telefono = "123456789"
                        },
                        new
                        {
                            ClienteId = 2,
                            Apellido = "Apellido2",
                            Direccion = "Dirección 2",
                            Email = "nombre2@example.com",
                            Nombre = "Nombre2",
                            Telefono = "987654321"
                        },
                        new
                        {
                            ClienteId = 3,
                            Apellido = "Apellido3",
                            Direccion = "Dirección 3",
                            Email = "nombre3@example.com",
                            Nombre = "Nombre3",
                            Telefono = "111222333"
                        },
                        new
                        {
                            ClienteId = 4,
                            Apellido = "Apellido4",
                            Direccion = "Dirección 4",
                            Email = "nombre4@example.com",
                            Nombre = "Nombre4",
                            Telefono = "444555666"
                        },
                        new
                        {
                            ClienteId = 5,
                            Apellido = "Apellido5",
                            Direccion = "Dirección 5",
                            Email = "nombre5@example.com",
                            Nombre = "Nombre5",
                            Telefono = "777888999"
                        });
                });

            modelBuilder.Entity("MediTechAPI.Models.RegistrarCitaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("ServicioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RegistrarCitaModel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            Nota = "Nota de cita 1 con al menos 20 caracteres.",
                            PacienteId = 1,
                            ServicioId = 1
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 2,
                            Nota = "Nota de cita 2 con más de 20 caracteres.",
                            PacienteId = 2,
                            ServicioId = 2
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 3,
                            Nota = "Nota de cita 3 con 20+ caracteres.",
                            PacienteId = 3,
                            ServicioId = 3
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 4,
                            Nota = "Nota de cita 4 con suficientes caracteres.",
                            PacienteId = 4,
                            ServicioId = 4
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 5,
                            Nota = "Nota de cita 5 con texto suficiente.",
                            PacienteId = 5,
                            ServicioId = 5
                        });
                });

            modelBuilder.Entity("MediTechAPI.Models.ServiciosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ServiciosModel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Consulta General"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Análisis de Sangre"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Radiografía"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Cirugía Menor"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Servicio Dental"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
